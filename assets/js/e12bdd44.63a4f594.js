"use strict";(self.webpackChunkasync_storage_website=self.webpackChunkasync_storage_website||[]).push([[553],{2247:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>p});var a=t(4041);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),g=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=g(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=g(t),y=r,p=u["".concat(s,".").concat(y)]||u[y]||d[y]||o;return t?a.createElement(p,l(l({ref:n},c),{},{components:t})):a.createElement(p,l({ref:n},c))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=y;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var g=2;g<o;g++)l[g]=t[g];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6112:(e,n,t)=>{t.d(n,{A:()=>r});var a=t(4041);const r=e=>{let{platformIcon:n,title:t}=e;return a.createElement("div",{style:{display:"flex",margin:"10px 20px",alignItems:"center",flexDirection:"row"}},a.createElement("img",{style:{width:34,height:34},src:`/async-storage/img/${n}`}),a.createElement("p",{style:{margin:"0 0 0 10px",padding:0}},t))}},5992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>i,default:()=>y,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=t(9575),r=(t(4041),t(2247)),o=t(6112);const l={id:"brownfield",title:"Brownfield integration",sidebar_label:"Brownfield integration"},i=void 0,s={unversionedId:"advanced/brownfield",id:"advanced/brownfield",title:"Brownfield integration",description:"Supported platforms:",source:"@site/docs/advanced/BrownfieldIntegration.md",sourceDirName:"advanced",slug:"/advanced/brownfield",permalink:"/async-storage/docs/advanced/brownfield",draft:!1,editUrl:"https://github.com/react-native-async-storage/async-storage/edit/main/website/docs/advanced/BrownfieldIntegration.md",tags:[],version:"current",frontMatter:{id:"brownfield",title:"Brownfield integration",sidebar_label:"Brownfield integration"},sidebar:"docs",previous:{title:"Jest integration",permalink:"/async-storage/docs/advanced/jest"},next:{title:"iCloud backup",permalink:"/async-storage/docs/advanced/backup"}},g={},c=[{value:"The protocol",id:"the-protocol",level:2},{value:"allKeys",id:"allkeys",level:3},{value:"mergeValues",id:"mergevalues",level:3},{value:"removeAllValues",id:"removeallvalues",level:3},{value:"removeValuesForKeys",id:"removevaluesforkeys",level:3},{value:"setValues",id:"setvalues",level:3},{value:"valuesForKeys",id:"valuesforkeys",level:3},{value:"passthrough",id:"passthrough",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Access storage",id:"access-storage",level:2},{value:"Kotlin (recommended)",id:"kotlin-recommended",level:3},{value:"Reading value",id:"reading-value",level:4},{value:"Saving value",id:"saving-value",level:4},{value:"Java",id:"java",level:3},{value:"Reading from storage",id:"reading-from-storage",level:4},{value:"Saving to storage",id:"saving-to-storage",level:4}],u={toc:c},d="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Supported platforms:")),(0,r.yg)(o.A,{title:"iOS/MacOS",platformIcon:"icon_ios.svg",mdxType:"PlatformSupport"}),(0,r.yg)(o.A,{title:"Android",platformIcon:"icon_android.svg",mdxType:"PlatformSupport"}),(0,r.yg)("hr",null),(0,r.yg)("h1",{id:"ios"},"iOS"),(0,r.yg)("p",null,"If you're embedding React Native into native application, you can also integrate\nAsync Storage module, so that both worlds will use one storage solution."),(0,r.yg)("p",null,"AsyncStorage can be controlled by the hosting app via the delegate on\n",(0,r.yg)("inlineCode",{parentName:"p"},"RNCAsyncStorage"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-objc"},"RNCAsyncStorage *asyncStorage = [bridge moduleForClass:[RNCAsyncStorage class]];\nasyncStorage.delegate = self;\n")),(0,r.yg)("h2",{id:"the-protocol"},"The protocol"),(0,r.yg)("p",null,"The delegate must conform to the ",(0,r.yg)("inlineCode",{parentName:"p"},"RNCAsyncStorageDelegate")," protocol:"),(0,r.yg)("h3",{id:"allkeys"},"allKeys"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-objc"},"- (void)allKeys:(RNCAsyncStorageResultCallback)block;\n")),(0,r.yg)("p",null,"Returns all keys currently stored. If none, an empty array is returned.\nCalled by ",(0,r.yg)("inlineCode",{parentName:"p"},"getAllKeys")," in JS."),(0,r.yg)("h3",{id:"mergevalues"},"mergeValues"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-objc"},"- (void)mergeValues:(NSArray<NSString *> *)values\n            forKeys:(NSArray<NSString *> *)keys\n         completion:(RNCAsyncStorageResultCallback)block;\n")),(0,r.yg)("p",null,"Merges values with the corresponding values stored at specified keys.\nCalled by ",(0,r.yg)("inlineCode",{parentName:"p"},"mergeItem")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"multiMerge")," in JS."),(0,r.yg)("h3",{id:"removeallvalues"},"removeAllValues"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-objc"},"- (void)removeAllValues:(RNCAsyncStorageCompletion)block;\n")),(0,r.yg)("p",null,"Removes all values from the store. Called by ",(0,r.yg)("inlineCode",{parentName:"p"},"clear")," in JS."),(0,r.yg)("h3",{id:"removevaluesforkeys"},"removeValuesForKeys"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-objc"},"- (void)removeValuesForKeys:(NSArray<NSString *> *)keys\n                 completion:(RNCAsyncStorageResultCallback)block;\n")),(0,r.yg)("p",null,"Removes all values associated with specified keys.\nCalled by ",(0,r.yg)("inlineCode",{parentName:"p"},"removeItem")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"multiRemove")," in JS."),(0,r.yg)("h3",{id:"setvalues"},"setValues"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-objc"},"- (void)setValues:(NSArray<NSString *> *)values\n          forKeys:(NSArray<NSString *> *)keys\n       completion:(RNCAsyncStorageResultCallback)block;\n")),(0,r.yg)("p",null,"Sets specified key-value pairs. Called by ",(0,r.yg)("inlineCode",{parentName:"p"},"setItem")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"multiSet")," in JS."),(0,r.yg)("h3",{id:"valuesforkeys"},"valuesForKeys"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-objc"},"- (void)valuesForKeys:(NSArray<NSString *> *)keys\n           completion:(RNCAsyncStorageResultCallback)block;\n")),(0,r.yg)("p",null,"Returns values associated with specified keys.\nCalled by ",(0,r.yg)("inlineCode",{parentName:"p"},"getItem")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"multiGet")," in JS."),(0,r.yg)("h3",{id:"passthrough"},"passthrough"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-objc"},"@optional\n@property (nonatomic, readonly, getter=isPassthrough) BOOL passthrough;\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Optional:")," Returns whether the delegate should be treated as a passthrough.\nThis is useful for monitoring storage usage among other things. Returns ",(0,r.yg)("inlineCode",{parentName:"p"},"NO")," by\ndefault."),(0,r.yg)("hr",null),(0,r.yg)("h1",{id:"android"},"Android"),(0,r.yg)("p",null,"The recommended approach here is to use Kotlin language to leverage coroutines when accessing the storage.\nJava is also supported (through Kotlin interop), but the approach is more cumbersome."),(0,r.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"/async-storage/docs/advanced/next"},"Next storage feature")," enabled."),(0,r.yg)("li",{parentName:"ol"},"Add dependency on ",(0,r.yg)("inlineCode",{parentName:"li"},"coroutines-android")," in your app's ",(0,r.yg)("inlineCode",{parentName:"li"},"build.gradle"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'\ndependencies {\n  // other dependencies\n\n\n  // will work with coroutines 1.3.0 and up\n+ implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9"\n\n}\n')),(0,r.yg)("ol",{start:3},(0,r.yg)("li",{parentName:"ol"},"Your library of choice for parsing JSON storage values (since there are strings only)")),(0,r.yg)("h2",{id:"access-storage"},"Access storage"),(0,r.yg)("h3",{id:"kotlin-recommended"},"Kotlin (recommended)"),(0,r.yg)("p",null,"We use Coroutines to handle asynchronous code. Each method on storage is ",(0,r.yg)("inlineCode",{parentName:"p"},"suspend")," method, so you need to\ncall it from within a coroutine."),(0,r.yg)("h4",{id:"reading-value"},"Reading value"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-kotlin"},"suspend fun readValue(ctx: Context, keys: List<String>) {\n    // get instance of the Storage by providing context object\n    val asyncStorage = StorageModule.getStorageInstance(ctx)\n\n    val entries: List<Entry> = asyncStorage.getValues(keys)\n    doSomethingWithValues(entries)\n}\n")),(0,r.yg)("h4",{id:"saving-value"},"Saving value"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-kotlin"},'suspend fun saveValue(ctx: Context) {\n    val asyncStorage = StorageModule.getStorageInstance(ctx)\n\n    val entries = listOf(\n        Entry("myKey", "myValue")\n    )\n    asyncStorage.setValues(entries)\n}\n')),(0,r.yg)("h3",{id:"java"},"Java"),(0,r.yg)("p",null,"You can access AsyncStorage form Java, but you're still required to add Kotlin dependencies.\nThere's no one way of accessing the data and there's more than one way to parse it."),(0,r.yg)("h4",{id:"reading-from-storage"},"Reading from storage"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"void readStorageValue(Context ctx, String key) {\n    AsyncStorageAccess asyncStorage = StorageModule.getStorageInstance(ctx);\n\n    BuildersKt.launch(GlobalScope.INSTANCE,\n                Dispatchers.getIO(),\n                CoroutineStart.DEFAULT,\n                (scope, continuation) -> {\n                    List<String> keys = new ArrayList<>();\n                    keys.add(key);\n\n                    Continuation<? super List<? extends Entry>> cont = new Continuation() {\n                        @NotNull\n                        @Override\n                        public CoroutineContext getContext() {\n                            return scope.getCoroutineContext();\n                        }\n\n                        @Override\n                        public void resumeWith(@NotNull Object o) {\n                            List<Entry> entries = (List<Entry>) o;\n                            doSomethingWithEntries(entries);\n                        }\n                    };\n\n                    asyncStorage.getValues(keys, cont);\n                    return Unit.INSTANCE;\n                });\n\n}\n")),(0,r.yg)("h4",{id:"saving-to-storage"},"Saving to storage"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"void saveStorageValue(Context ctx, String key, String value) {\n  AsyncStorageAccess asyncStorage = StorageModule.getStorageInstance(ctx);\n\n  BuildersKt.launch(GlobalScope.INSTANCE,\n                Dispatchers.getIO(),\n                CoroutineStart.DEFAULT,\n                (scope, continuation) -> {\n                    Continuation cont = new Continuation() {\n                        @NotNull\n                        @Override\n                        public CoroutineContext getContext() {\n                            return scope.getCoroutineContext();\n                        }\n\n                        @Override\n                        public void resumeWith(@NotNull Object o) {}\n                    };\n\n                    List<Entry> entries = new ArrayList<>();\n                    Entry entry = new Entry(key, value);\n                    entries.add(entry);\n                    asyncStorage.setValues(entries, cont);\n                    return Unit.INSTANCE;\n                });\n}\n")))}y.isMDXComponent=!0}}]);