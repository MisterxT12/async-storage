"use strict";(self.webpackChunkasync_storage_website=self.webpackChunkasync_storage_website||[]).push([[866],{2247:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>u});var a=n(4041);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),y=r,u=c["".concat(s,".").concat(y)]||c[y]||g[y]||o;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},6112:(e,t,n)=>{n.d(t,{A:()=>r});var a=n(4041);const r=e=>{let{platformIcon:t,title:n}=e;return a.createElement("div",{style:{display:"flex",margin:"10px 20px",alignItems:"center",flexDirection:"row"}},a.createElement("img",{style:{width:34,height:34},src:`/async-storage/img/${t}`}),a.createElement("p",{style:{margin:"0 0 0 10px",padding:0}},n))}},1325:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(9575),r=(n(4041),n(2247)),o=n(6112);const i={id:"next",title:"Next storage implementation",sidebar_label:"Next storage implementation"},l=void 0,s={unversionedId:"advanced/next",id:"advanced/next",title:"Next storage implementation",description:"Supported platforms:",source:"@site/docs/advanced/Next.md",sourceDirName:"advanced",slug:"/advanced/next",permalink:"/async-storage/docs/advanced/next",draft:!1,editUrl:"https://github.com/react-native-async-storage/async-storage/edit/main/website/docs/advanced/Next.md",tags:[],version:"current",frontMatter:{id:"next",title:"Next storage implementation",sidebar_label:"Next storage implementation"},sidebar:"docs",previous:{title:"Known limits",permalink:"/async-storage/docs/limits"},next:{title:"Jest integration",permalink:"/async-storage/docs/advanced/jest"}},p={},d=[{value:"Motivation",id:"motivation",level:3},{value:"Migration",id:"migration",level:3},{value:"How it works",id:"how-it-works",level:4},{value:"Why is it important",id:"why-is-it-important",level:4},{value:"Enable",id:"enable",level:3},{value:"Add config flag",id:"add-config-flag",level:4},{value:"React Native &lt; 0.73",id:"react-native--073",level:4},{value:"Configuration",id:"configuration",level:3},{value:"Notable changes",id:"notable-changes",level:3}],c={toc:d},g="wrapper";function y(e){let{components:t,...n}=e;return(0,r.yg)(g,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Supported platforms:")),(0,r.yg)(o.A,{title:"Android",platformIcon:"icon_android.svg",mdxType:"PlatformSupport"}),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"motivation"},"Motivation"),(0,r.yg)("p",null,"Current implementation of persistence layer is created using ",(0,r.yg)("a",{parentName:"p",href:"https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper"},"SQLiteOpenHelper"),",\na helper class that manages database creation and migrations. Even if this approach is powerful, the lack of compile time query verification and a big boilerplate of mapping SQLite queries  to actual values make this implementation prone to many errors."),(0,r.yg)("p",null,"This Async Storage feature improves the persistence layer, using modern approaches to access SQLite (using ",(0,r.yg)("a",{parentName:"p",href:"https://developer.android.com/training/data-storage/room"},"Room"),"), to reduce possible anomalies to the minimum.\nOn top of that, it allows accessing AsyncStorage from the native side, useful in ",(0,r.yg)("a",{parentName:"p",href:"/async-storage/docs/advanced/brownfield#android"},"Brownfield integration.")),(0,r.yg)("h3",{id:"migration"},"Migration"),(0,r.yg)("p",null,"This feature requires no migration from the developer perspective - the current database will be recreated (based on the current one), meaning user won't lose any data if you decide to opt in.\nThere's a small drawback to know - the database \"recreation\" happens ",(0,r.yg)("strong",{parentName:"p"},"only once"),". "),(0,r.yg)("h4",{id:"how-it-works"},"How it works"),(0,r.yg)("p",null,"The new database (the one used by this feature) will be created based on the current database file, if the new one does not exist yet.\nIf we detect that there's already the new database on the device, recreation will not kick in."),(0,r.yg)("h4",{id:"why-is-it-important"},"Why is it important"),(0,r.yg)("p",null,"Let's say you enabled the feature for the first time - recreation kicks in and the old database file is untouched.\nIf you decide to disable the feature, your users will be back using old database. No data migrations is happening from new to old database file.\nWhen you enable the feature again, the new database is ",(0,r.yg)("strong",{parentName:"p"},"not")," recreated, because it already exists, and no data is copied over."),(0,r.yg)("h3",{id:"enable"},"Enable"),(0,r.yg)("h4",{id:"add-config-flag"},"Add config flag"),(0,r.yg)("p",null,"In your project's ",(0,r.yg)("inlineCode",{parentName:"p"},"android")," directory, locate ",(0,r.yg)("inlineCode",{parentName:"p"},"gradle.properties")," file (if it does not exist, create one) and add the line:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-groovy"},"AsyncStorage_useNextStorage=true\n")),(0,r.yg)("h4",{id:"react-native--073"},"React Native < 0.73"),(0,r.yg)("p",null,"For React Native below version 0.73, you need to apply Kotlin plugin to your project.\nIn your project's android directory, locate root build.gradle file. Add Kotlin dependency to the buildscript:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"}," buildscript {\n     ext {\n         // other extensions\n+        kotlinVersion = '1.9.24'\n     }\n    \n     dependencies {\n         // other dependencies\n+        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"\n     }\n }\n\n")),(0,r.yg)("h3",{id:"configuration"},"Configuration"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Kotlin version")),(0,r.yg)("p",null,"Next storage is tested against Kotlin version ",(0,r.yg)("inlineCode",{parentName:"p"},"1.9.24"),".\nYou can specify different version, in one of two ways:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"add ",(0,r.yg)("inlineCode",{parentName:"li"},"kotlinVersion")," extension to the ",(0,r.yg)("inlineCode",{parentName:"li"},"rootProject"),":")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-groovy"},"rootProject.ext.kotlinVersion = '1.9.24'\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"specify ",(0,r.yg)("inlineCode",{parentName:"li"},"AsyncStorage_kotlinVersion")," in ",(0,r.yg)("inlineCode",{parentName:"li"},"gradle.properties"),":")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-groovy"},"AsyncStorage_kotlinVersion=1.9.24\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Room")),(0,r.yg)("p",null,"Next AsyncStorage uses ",(0,r.yg)("a",{parentName:"p",href:"https://developer.android.com/jetpack/androidx/releases/room"},"Room persistence library")," to store data.\nCurrently, tested version is ",(0,r.yg)("inlineCode",{parentName:"p"},"2.6.1"),". You can specify different version, by adding a flag to ",(0,r.yg)("inlineCode",{parentName:"p"},"gradle.properties"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-groovy"},"AsyncStorage_next_roomVersion=2.6.1\n")),(0,r.yg)("p",null,"KSP is enabled for symbol processing for the Room library.\nKSP version will be selected based on Kotlin version in your project.\nIf you want to use different KSP version, you can set a property in ",(0,r.yg)("inlineCode",{parentName:"p"},"gradle.properties"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-groovy"},"AsyncStorage_next_kspVersion=1.9.24-1.0.20\n")),(0,r.yg)("h3",{id:"notable-changes"},"Notable changes"),(0,r.yg)("p",null,"Alongside of a warning regarding ",(0,r.yg)("inlineCode",{parentName:"p"},"key"),"/",(0,r.yg)("inlineCode",{parentName:"p"},"value"),", errors are thrown when:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Your ",(0,r.yg)("inlineCode",{parentName:"li"},"key")," is ",(0,r.yg)("inlineCode",{parentName:"li"},"null")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"not a string")),(0,r.yg)("li",{parentName:"ul"},"You provide value that is ",(0,r.yg)("inlineCode",{parentName:"li"},"not a string"))))}y.isMDXComponent=!0}}]);