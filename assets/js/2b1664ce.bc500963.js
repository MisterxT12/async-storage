"use strict";(self.webpackChunkasync_storage_website=self.webpackChunkasync_storage_website||[]).push([[4],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4419:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={id:"limits",title:"Known storage limits",sidebar_label:"Known limits"},c=void 0,l={unversionedId:"limits",id:"limits",title:"Known storage limits",description:"Android",source:"@site/docs/Limits.md",sourceDirName:".",slug:"/limits",permalink:"/async-storage/docs/limits",draft:!1,editUrl:"https://github.com/react-native-async-storage/async-storage/edit/main/website/docs/Limits.md",tags:[],version:"current",frontMatter:{id:"limits",title:"Known storage limits",sidebar_label:"Known limits"},sidebar:"docs",previous:{title:"API",permalink:"/async-storage/docs/api"},next:{title:"Next storage implementation",permalink:"/async-storage/docs/advanced/next"}},u={},p=[{value:"Android",id:"android",level:2}],d={toc:p},m="wrapper";function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"android"},"Android"),(0,i.kt)("p",null,"AsyncStorage for Android uses SQLite for storage backend. While it has ",(0,i.kt)("a",{parentName:"p",href:"https://www.sqlite.org/limits.html"},"its own size limits"),", Android system also have two known limits: total storage size and per-entry size limit."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Total storage size is capped at 6 MB by default. You can increase this size by ",(0,i.kt)("a",{parentName:"p",href:"/async-storage/docs/advanced/db_size"},"specifying a new size using feature flag.")," ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Per-entry is limited by a size of a WindowCursor, a buffer used to read data from SQLite. ",(0,i.kt)("a",{parentName:"p",href:"https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/res/res/values/config.xml;l=2103"},"Currently it's size is around 2 MB"),".\nThis means that the single item read at one time cannot be larger than 2 MB. There's no supported workaround from AsyncStorage.\nWe suggest keeping your data lower than that, by chopping it down into many entries, instead of one massive entry.\nThis is where ",(0,i.kt)("a",{parentName:"p",href:"/async-storage/docs/api#multiget"},(0,i.kt)("inlineCode",{parentName:"a"},"multiGet"))," and ",(0,i.kt)("a",{parentName:"p",href:"/async-storage/docs/api#multiset"},(0,i.kt)("inlineCode",{parentName:"a"},"multiSet"))," APIs can shine."))))}f.isMDXComponent=!0}}]);